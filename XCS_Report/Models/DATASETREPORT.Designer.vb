'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8937
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DATASETREPORT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DATASETREPORT
    Inherits Global.System.Data.DataSet
    
    Private tableILL_P030 As ILL_P030DataTable
    
    Private tableILL_P028 As ILL_P028DataTable
    
    Private tableILL_P029 As ILL_P029DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ILL_P030")) Is Nothing) Then
                MyBase.Tables.Add(New ILL_P030DataTable(ds.Tables("ILL_P030")))
            End If
            If (Not (ds.Tables("ILL_P028")) Is Nothing) Then
                MyBase.Tables.Add(New ILL_P028DataTable(ds.Tables("ILL_P028")))
            End If
            If (Not (ds.Tables("ILL_P029")) Is Nothing) Then
                MyBase.Tables.Add(New ILL_P029DataTable(ds.Tables("ILL_P029")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ILL_P030() As ILL_P030DataTable
        Get
            Return Me.tableILL_P030
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ILL_P028() As ILL_P028DataTable
        Get
            Return Me.tableILL_P028
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ILL_P029() As ILL_P029DataTable
        Get
            Return Me.tableILL_P029
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DATASETREPORT = CType(MyBase.Clone,DATASETREPORT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ILL_P030")) Is Nothing) Then
                MyBase.Tables.Add(New ILL_P030DataTable(ds.Tables("ILL_P030")))
            End If
            If (Not (ds.Tables("ILL_P028")) Is Nothing) Then
                MyBase.Tables.Add(New ILL_P028DataTable(ds.Tables("ILL_P028")))
            End If
            If (Not (ds.Tables("ILL_P029")) Is Nothing) Then
                MyBase.Tables.Add(New ILL_P029DataTable(ds.Tables("ILL_P029")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableILL_P030 = CType(MyBase.Tables("ILL_P030"),ILL_P030DataTable)
        If (initTable = true) Then
            If (Not (Me.tableILL_P030) Is Nothing) Then
                Me.tableILL_P030.InitVars
            End If
        End If
        Me.tableILL_P028 = CType(MyBase.Tables("ILL_P028"),ILL_P028DataTable)
        If (initTable = true) Then
            If (Not (Me.tableILL_P028) Is Nothing) Then
                Me.tableILL_P028.InitVars
            End If
        End If
        Me.tableILL_P029 = CType(MyBase.Tables("ILL_P029"),ILL_P029DataTable)
        If (initTable = true) Then
            If (Not (Me.tableILL_P029) Is Nothing) Then
                Me.tableILL_P029.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DATASETREPORT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DATASETREPORT.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableILL_P030 = New ILL_P030DataTable
        MyBase.Tables.Add(Me.tableILL_P030)
        Me.tableILL_P028 = New ILL_P028DataTable
        MyBase.Tables.Add(Me.tableILL_P028)
        Me.tableILL_P029 = New ILL_P029DataTable
        MyBase.Tables.Add(Me.tableILL_P029)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeILL_P030() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeILL_P028() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeILL_P029() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DATASETREPORT = New DATASETREPORT
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ILL_P030RowChangeEventHandler(ByVal sender As Object, ByVal e As ILL_P030RowChangeEvent)
    
    Public Delegate Sub ILL_P028RowChangeEventHandler(ByVal sender As Object, ByVal e As ILL_P028RowChangeEvent)
    
    Public Delegate Sub ILL_P029RowChangeEventHandler(ByVal sender As Object, ByVal e As ILL_P029RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ILL_P030DataTable
        Inherits Global.System.Data.TypedTableBase(Of ILL_P030Row)
        
        Private columnArrestCode As Global.System.Data.DataColumn
        
        Private columnArrestStation As Global.System.Data.DataColumn
        
        Private _columnAS_Name6 As Global.System.Data.DataColumn
        
        Private columnArrestTime As Global.System.Data.DataColumn
        
        Private _columnAS_PositionName As Global.System.Data.DataColumn
        
        Private _columnAS_Nameup6 As Global.System.Data.DataColumn
        
        Private _columnAL_count As Global.System.Data.DataColumn
        
        Private _columnAL_Name As Global.System.Data.DataColumn
        
        Private _columnAP_ProductDesc As Global.System.Data.DataColumn
        
        Private columnBehaviour As Global.System.Data.DataColumn
        
        Private columnGuiltBaseName As Global.System.Data.DataColumn
        
        Private _columnai_Location As Global.System.Data.DataColumn
        
        Private columnOccurrenceTime As Global.System.Data.DataColumn
        
        Private columnArrestDay As Global.System.Data.DataColumn
        
        Private columnArrestMonth As Global.System.Data.DataColumn
        
        Private columnArrestYear As Global.System.Data.DataColumn
        
        Private columnOccurrenceDay As Global.System.Data.DataColumn
        
        Private columnOccurrenceMonth As Global.System.Data.DataColumn
        
        Private columnOccurrenceYear As Global.System.Data.DataColumn
        
        Private columnPrompt As Global.System.Data.DataColumn
        
        Private _columnAS_OfficeName As Global.System.Data.DataColumn
        
        Private _columnai_Address As Global.System.Data.DataColumn
        
        Private _columnai_Village As Global.System.Data.DataColumn
        
        Private _columnai_SubDistrict As Global.System.Data.DataColumn
        
        Private _columnai_District As Global.System.Data.DataColumn
        
        Private _columnai_Province As Global.System.Data.DataColumn
        
        Private _columnai_Road As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ILL_P030"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrestCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrestCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrestStationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrestStation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _AS_Name6Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnAS_Name6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrestTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrestTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _AS_PositionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAS_PositionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _AS_Nameup6Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnAS_Nameup6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _AL_countColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAL_count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _AL_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAL_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _AP_ProductDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAP_ProductDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BehaviourColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBehaviour
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuiltBaseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuiltBaseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ai_LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnai_Location
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccurrenceTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccurrenceTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrestDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrestDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrestMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrestMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrestYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrestYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccurrenceDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccurrenceDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccurrenceMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccurrenceMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OccurrenceYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOccurrenceYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PromptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrompt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _AS_OfficeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnAS_OfficeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ai_AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnai_Address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ai_VillageColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnai_Village
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ai_SubDistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnai_SubDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ai_DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnai_District
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ai_ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnai_Province
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ai_RoadColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnai_Road
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ILL_P030Row
            Get
                Return CType(Me.Rows(index),ILL_P030Row)
            End Get
        End Property
        
        Public Event ILL_P030RowChanging As ILL_P030RowChangeEventHandler
        
        Public Event ILL_P030RowChanged As ILL_P030RowChangeEventHandler
        
        Public Event ILL_P030RowDeleting As ILL_P030RowChangeEventHandler
        
        Public Event ILL_P030RowDeleted As ILL_P030RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddILL_P030Row(ByVal row As ILL_P030Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddILL_P030Row( _
                    ByVal ArrestCode As String,  _
                    ByVal ArrestStation As String,  _
                    ByVal _AS_Name6 As String,  _
                    ByVal ArrestTime As String,  _
                    ByVal _AS_PositionName As String,  _
                    ByVal _AS_Nameup6 As String,  _
                    ByVal _AL_count As String,  _
                    ByVal _AL_Name As String,  _
                    ByVal _AP_ProductDesc As String,  _
                    ByVal Behaviour As String,  _
                    ByVal GuiltBaseName As String,  _
                    ByVal _ai_Location As String,  _
                    ByVal OccurrenceTime As String,  _
                    ByVal ArrestDay As String,  _
                    ByVal ArrestMonth As String,  _
                    ByVal ArrestYear As String,  _
                    ByVal OccurrenceDay As String,  _
                    ByVal OccurrenceMonth As String,  _
                    ByVal OccurrenceYear As String,  _
                    ByVal Prompt As String,  _
                    ByVal _AS_OfficeName As String,  _
                    ByVal _ai_Address As String,  _
                    ByVal _ai_Village As String,  _
                    ByVal _ai_SubDistrict As String,  _
                    ByVal _ai_District As String,  _
                    ByVal _ai_Province As String,  _
                    ByVal _ai_Road As String) As ILL_P030Row
            Dim rowILL_P030Row As ILL_P030Row = CType(Me.NewRow,ILL_P030Row)
            Dim columnValuesArray() As Object = New Object() {ArrestCode, ArrestStation, _AS_Name6, ArrestTime, _AS_PositionName, _AS_Nameup6, _AL_count, _AL_Name, _AP_ProductDesc, Behaviour, GuiltBaseName, _ai_Location, OccurrenceTime, ArrestDay, ArrestMonth, ArrestYear, OccurrenceDay, OccurrenceMonth, OccurrenceYear, Prompt, _AS_OfficeName, _ai_Address, _ai_Village, _ai_SubDistrict, _ai_District, _ai_Province, _ai_Road}
            rowILL_P030Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowILL_P030Row)
            Return rowILL_P030Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ILL_P030DataTable = CType(MyBase.Clone,ILL_P030DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ILL_P030DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnArrestCode = MyBase.Columns("ArrestCode")
            Me.columnArrestStation = MyBase.Columns("ArrestStation")
            Me._columnAS_Name6 = MyBase.Columns("AS.Name6")
            Me.columnArrestTime = MyBase.Columns("ArrestTime")
            Me._columnAS_PositionName = MyBase.Columns("AS.PositionName")
            Me._columnAS_Nameup6 = MyBase.Columns("AS.Nameup6")
            Me._columnAL_count = MyBase.Columns("AL.count")
            Me._columnAL_Name = MyBase.Columns("AL.Name")
            Me._columnAP_ProductDesc = MyBase.Columns("AP.ProductDesc")
            Me.columnBehaviour = MyBase.Columns("Behaviour")
            Me.columnGuiltBaseName = MyBase.Columns("GuiltBaseName")
            Me._columnai_Location = MyBase.Columns("ai.Location")
            Me.columnOccurrenceTime = MyBase.Columns("OccurrenceTime")
            Me.columnArrestDay = MyBase.Columns("ArrestDay")
            Me.columnArrestMonth = MyBase.Columns("ArrestMonth")
            Me.columnArrestYear = MyBase.Columns("ArrestYear")
            Me.columnOccurrenceDay = MyBase.Columns("OccurrenceDay")
            Me.columnOccurrenceMonth = MyBase.Columns("OccurrenceMonth")
            Me.columnOccurrenceYear = MyBase.Columns("OccurrenceYear")
            Me.columnPrompt = MyBase.Columns("Prompt")
            Me._columnAS_OfficeName = MyBase.Columns("AS.OfficeName")
            Me._columnai_Address = MyBase.Columns("ai.Address")
            Me._columnai_Village = MyBase.Columns("ai.Village")
            Me._columnai_SubDistrict = MyBase.Columns("ai.SubDistrict")
            Me._columnai_District = MyBase.Columns("ai.District")
            Me._columnai_Province = MyBase.Columns("ai.Province")
            Me._columnai_Road = MyBase.Columns("ai.Road")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnArrestCode = New Global.System.Data.DataColumn("ArrestCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrestCode)
            Me.columnArrestStation = New Global.System.Data.DataColumn("ArrestStation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrestStation)
            Me._columnAS_Name6 = New Global.System.Data.DataColumn("AS.Name6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAS_Name6.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAS_Name6")
            Me._columnAS_Name6.ExtendedProperties.Add("Generator_UserColumnName", "AS.Name6")
            MyBase.Columns.Add(Me._columnAS_Name6)
            Me.columnArrestTime = New Global.System.Data.DataColumn("ArrestTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrestTime)
            Me._columnAS_PositionName = New Global.System.Data.DataColumn("AS.PositionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAS_PositionName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAS_PositionName")
            Me._columnAS_PositionName.ExtendedProperties.Add("Generator_UserColumnName", "AS.PositionName")
            MyBase.Columns.Add(Me._columnAS_PositionName)
            Me._columnAS_Nameup6 = New Global.System.Data.DataColumn("AS.Nameup6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAS_Nameup6.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAS_Nameup6")
            Me._columnAS_Nameup6.ExtendedProperties.Add("Generator_UserColumnName", "AS.Nameup6")
            MyBase.Columns.Add(Me._columnAS_Nameup6)
            Me._columnAL_count = New Global.System.Data.DataColumn("AL.count", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAL_count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAL_count")
            Me._columnAL_count.ExtendedProperties.Add("Generator_UserColumnName", "AL.count")
            MyBase.Columns.Add(Me._columnAL_count)
            Me._columnAL_Name = New Global.System.Data.DataColumn("AL.Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAL_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAL_Name")
            Me._columnAL_Name.ExtendedProperties.Add("Generator_UserColumnName", "AL.Name")
            MyBase.Columns.Add(Me._columnAL_Name)
            Me._columnAP_ProductDesc = New Global.System.Data.DataColumn("AP.ProductDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAP_ProductDesc.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAP_ProductDesc")
            Me._columnAP_ProductDesc.ExtendedProperties.Add("Generator_UserColumnName", "AP.ProductDesc")
            MyBase.Columns.Add(Me._columnAP_ProductDesc)
            Me.columnBehaviour = New Global.System.Data.DataColumn("Behaviour", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBehaviour)
            Me.columnGuiltBaseName = New Global.System.Data.DataColumn("GuiltBaseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuiltBaseName)
            Me._columnai_Location = New Global.System.Data.DataColumn("ai.Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnai_Location.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnai_Location")
            Me._columnai_Location.ExtendedProperties.Add("Generator_UserColumnName", "ai.Location")
            MyBase.Columns.Add(Me._columnai_Location)
            Me.columnOccurrenceTime = New Global.System.Data.DataColumn("OccurrenceTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccurrenceTime)
            Me.columnArrestDay = New Global.System.Data.DataColumn("ArrestDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrestDay)
            Me.columnArrestMonth = New Global.System.Data.DataColumn("ArrestMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrestMonth)
            Me.columnArrestYear = New Global.System.Data.DataColumn("ArrestYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrestYear)
            Me.columnOccurrenceDay = New Global.System.Data.DataColumn("OccurrenceDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccurrenceDay)
            Me.columnOccurrenceMonth = New Global.System.Data.DataColumn("OccurrenceMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccurrenceMonth)
            Me.columnOccurrenceYear = New Global.System.Data.DataColumn("OccurrenceYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOccurrenceYear)
            Me.columnPrompt = New Global.System.Data.DataColumn("Prompt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrompt)
            Me._columnAS_OfficeName = New Global.System.Data.DataColumn("AS.OfficeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAS_OfficeName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAS_OfficeName")
            Me._columnAS_OfficeName.ExtendedProperties.Add("Generator_UserColumnName", "AS.OfficeName")
            MyBase.Columns.Add(Me._columnAS_OfficeName)
            Me._columnai_Address = New Global.System.Data.DataColumn("ai.Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnai_Address.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnai_Address")
            Me._columnai_Address.ExtendedProperties.Add("Generator_UserColumnName", "ai.Address")
            MyBase.Columns.Add(Me._columnai_Address)
            Me._columnai_Village = New Global.System.Data.DataColumn("ai.Village", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnai_Village.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnai_Village")
            Me._columnai_Village.ExtendedProperties.Add("Generator_UserColumnName", "ai.Village")
            MyBase.Columns.Add(Me._columnai_Village)
            Me._columnai_SubDistrict = New Global.System.Data.DataColumn("ai.SubDistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnai_SubDistrict.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnai_SubDistrict")
            Me._columnai_SubDistrict.ExtendedProperties.Add("Generator_UserColumnName", "ai.SubDistrict")
            MyBase.Columns.Add(Me._columnai_SubDistrict)
            Me._columnai_District = New Global.System.Data.DataColumn("ai.District", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnai_District.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnai_District")
            Me._columnai_District.ExtendedProperties.Add("Generator_UserColumnName", "ai.District")
            MyBase.Columns.Add(Me._columnai_District)
            Me._columnai_Province = New Global.System.Data.DataColumn("ai.Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnai_Province.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnai_Province")
            Me._columnai_Province.ExtendedProperties.Add("Generator_UserColumnName", "ai.Province")
            MyBase.Columns.Add(Me._columnai_Province)
            Me._columnai_Road = New Global.System.Data.DataColumn("ai.Road", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnai_Road.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnai_Road")
            Me._columnai_Road.ExtendedProperties.Add("Generator_UserColumnName", "ai.Road")
            MyBase.Columns.Add(Me._columnai_Road)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewILL_P030Row() As ILL_P030Row
            Return CType(Me.NewRow,ILL_P030Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ILL_P030Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ILL_P030Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ILL_P030RowChangedEvent) Is Nothing) Then
                RaiseEvent ILL_P030RowChanged(Me, New ILL_P030RowChangeEvent(CType(e.Row,ILL_P030Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ILL_P030RowChangingEvent) Is Nothing) Then
                RaiseEvent ILL_P030RowChanging(Me, New ILL_P030RowChangeEvent(CType(e.Row,ILL_P030Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ILL_P030RowDeletedEvent) Is Nothing) Then
                RaiseEvent ILL_P030RowDeleted(Me, New ILL_P030RowChangeEvent(CType(e.Row,ILL_P030Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ILL_P030RowDeletingEvent) Is Nothing) Then
                RaiseEvent ILL_P030RowDeleting(Me, New ILL_P030RowChangeEvent(CType(e.Row,ILL_P030Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveILL_P030Row(ByVal row As ILL_P030Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DATASETREPORT = New DATASETREPORT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ILL_P030DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ILL_P028DataTable
        Inherits Global.System.Data.TypedTableBase(Of ILL_P028Row)
        
        Private _columnA_CompareCode As Global.System.Data.DataColumn
        
        Private _columnA_CompareStation As Global.System.Data.DataColumn
        
        Private _columnA_IndictmentDetailID As Global.System.Data.DataColumn
        
        Private _columnA_PaymentDate As Global.System.Data.DataColumn
        
        Private _columnA_TotalFine As Global.System.Data.DataColumn
        
        Private _columnB_LawbreakerFullName As Global.System.Data.DataColumn
        
        Private _columnB_GuiltbaseName As Global.System.Data.DataColumn
        
        Private _columnB_SubSectionType As Global.System.Data.DataColumn
        
        Private _columnB_SectionNo As Global.System.Data.DataColumn
        
        Private _columnC_ArrestDay As Global.System.Data.DataColumn
        
        Private _columnC_ArrestMonth As Global.System.Data.DataColumn
        
        Private _columnC_ArrestYear As Global.System.Data.DataColumn
        
        Private _columnC_ArrestTime As Global.System.Data.DataColumn
        
        Private _columnC_SubDistinct As Global.System.Data.DataColumn
        
        Private _columnC_Distinct As Global.System.Data.DataColumn
        
        Private _columnC_Province As Global.System.Data.DataColumn
        
        Private _columnA_PaymentDay As Global.System.Data.DataColumn
        
        Private _columnA_PaymentMonth As Global.System.Data.DataColumn
        
        Private _columnA_PaymentYear As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ILL_P028"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_CompareCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_CompareCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_CompareStationColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_CompareStation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_IndictmentDetailIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_IndictmentDetailID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_PaymentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_PaymentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_TotalFineColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_TotalFine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_LawbreakerFullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_LawbreakerFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_GuiltbaseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_GuiltbaseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_SubSectionTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_SubSectionType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_SectionNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_SectionNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _C_ArrestDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnC_ArrestDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _C_ArrestMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnC_ArrestMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _C_ArrestYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnC_ArrestYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _C_ArrestTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnC_ArrestTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _C_SubDistinctColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnC_SubDistinct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _C_DistinctColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnC_Distinct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _C_ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnC_Province
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_PaymentDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_PaymentDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_PaymentMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_PaymentMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_PaymentYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_PaymentYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ILL_P028Row
            Get
                Return CType(Me.Rows(index),ILL_P028Row)
            End Get
        End Property
        
        Public Event ILL_P028RowChanging As ILL_P028RowChangeEventHandler
        
        Public Event ILL_P028RowChanged As ILL_P028RowChangeEventHandler
        
        Public Event ILL_P028RowDeleting As ILL_P028RowChangeEventHandler
        
        Public Event ILL_P028RowDeleted As ILL_P028RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddILL_P028Row(ByVal row As ILL_P028Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddILL_P028Row( _
                    ByVal _A_CompareCode As String,  _
                    ByVal _A_CompareStation As String,  _
                    ByVal _A_IndictmentDetailID As String,  _
                    ByVal _A_PaymentDate As String,  _
                    ByVal _A_TotalFine As String,  _
                    ByVal _B_LawbreakerFullName As String,  _
                    ByVal _B_GuiltbaseName As String,  _
                    ByVal _B_SubSectionType As String,  _
                    ByVal _B_SectionNo As String,  _
                    ByVal _C_ArrestDay As String,  _
                    ByVal _C_ArrestMonth As String,  _
                    ByVal _C_ArrestYear As String,  _
                    ByVal _C_ArrestTime As String,  _
                    ByVal _C_SubDistinct As String,  _
                    ByVal _C_Distinct As String,  _
                    ByVal _C_Province As String,  _
                    ByVal _A_PaymentDay As String,  _
                    ByVal _A_PaymentMonth As String,  _
                    ByVal _A_PaymentYear As String) As ILL_P028Row
            Dim rowILL_P028Row As ILL_P028Row = CType(Me.NewRow,ILL_P028Row)
            Dim columnValuesArray() As Object = New Object() {_A_CompareCode, _A_CompareStation, _A_IndictmentDetailID, _A_PaymentDate, _A_TotalFine, _B_LawbreakerFullName, _B_GuiltbaseName, _B_SubSectionType, _B_SectionNo, _C_ArrestDay, _C_ArrestMonth, _C_ArrestYear, _C_ArrestTime, _C_SubDistinct, _C_Distinct, _C_Province, _A_PaymentDay, _A_PaymentMonth, _A_PaymentYear}
            rowILL_P028Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowILL_P028Row)
            Return rowILL_P028Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ILL_P028DataTable = CType(MyBase.Clone,ILL_P028DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ILL_P028DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columnA_CompareCode = MyBase.Columns("A.CompareCode")
            Me._columnA_CompareStation = MyBase.Columns("A.CompareStation")
            Me._columnA_IndictmentDetailID = MyBase.Columns("A.IndictmentDetailID")
            Me._columnA_PaymentDate = MyBase.Columns("A.PaymentDate")
            Me._columnA_TotalFine = MyBase.Columns("A.TotalFine")
            Me._columnB_LawbreakerFullName = MyBase.Columns("B.LawbreakerFullName")
            Me._columnB_GuiltbaseName = MyBase.Columns("B.GuiltbaseName")
            Me._columnB_SubSectionType = MyBase.Columns("B.SubSectionType")
            Me._columnB_SectionNo = MyBase.Columns("B.SectionNo")
            Me._columnC_ArrestDay = MyBase.Columns("C.ArrestDay")
            Me._columnC_ArrestMonth = MyBase.Columns("C.ArrestMonth")
            Me._columnC_ArrestYear = MyBase.Columns("C.ArrestYear")
            Me._columnC_ArrestTime = MyBase.Columns("C.ArrestTime")
            Me._columnC_SubDistinct = MyBase.Columns("C.SubDistinct")
            Me._columnC_Distinct = MyBase.Columns("C.Distinct")
            Me._columnC_Province = MyBase.Columns("C.Province")
            Me._columnA_PaymentDay = MyBase.Columns("A.PaymentDay")
            Me._columnA_PaymentMonth = MyBase.Columns("A.PaymentMonth")
            Me._columnA_PaymentYear = MyBase.Columns("A.PaymentYear")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columnA_CompareCode = New Global.System.Data.DataColumn("A.CompareCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_CompareCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_CompareCode")
            Me._columnA_CompareCode.ExtendedProperties.Add("Generator_UserColumnName", "A.CompareCode")
            MyBase.Columns.Add(Me._columnA_CompareCode)
            Me._columnA_CompareStation = New Global.System.Data.DataColumn("A.CompareStation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_CompareStation.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_CompareStation")
            Me._columnA_CompareStation.ExtendedProperties.Add("Generator_UserColumnName", "A.CompareStation")
            MyBase.Columns.Add(Me._columnA_CompareStation)
            Me._columnA_IndictmentDetailID = New Global.System.Data.DataColumn("A.IndictmentDetailID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_IndictmentDetailID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_IndictmentDetailID")
            Me._columnA_IndictmentDetailID.ExtendedProperties.Add("Generator_UserColumnName", "A.IndictmentDetailID")
            MyBase.Columns.Add(Me._columnA_IndictmentDetailID)
            Me._columnA_PaymentDate = New Global.System.Data.DataColumn("A.PaymentDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_PaymentDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_PaymentDate")
            Me._columnA_PaymentDate.ExtendedProperties.Add("Generator_UserColumnName", "A.PaymentDate")
            MyBase.Columns.Add(Me._columnA_PaymentDate)
            Me._columnA_TotalFine = New Global.System.Data.DataColumn("A.TotalFine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_TotalFine.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_TotalFine")
            Me._columnA_TotalFine.ExtendedProperties.Add("Generator_UserColumnName", "A.TotalFine")
            MyBase.Columns.Add(Me._columnA_TotalFine)
            Me._columnB_LawbreakerFullName = New Global.System.Data.DataColumn("B.LawbreakerFullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_LawbreakerFullName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_LawbreakerFullName")
            Me._columnB_LawbreakerFullName.ExtendedProperties.Add("Generator_UserColumnName", "B.LawbreakerFullName")
            MyBase.Columns.Add(Me._columnB_LawbreakerFullName)
            Me._columnB_GuiltbaseName = New Global.System.Data.DataColumn("B.GuiltbaseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_GuiltbaseName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_GuiltbaseName")
            Me._columnB_GuiltbaseName.ExtendedProperties.Add("Generator_UserColumnName", "B.GuiltbaseName")
            MyBase.Columns.Add(Me._columnB_GuiltbaseName)
            Me._columnB_SubSectionType = New Global.System.Data.DataColumn("B.SubSectionType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_SubSectionType.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_SubSectionType")
            Me._columnB_SubSectionType.ExtendedProperties.Add("Generator_UserColumnName", "B.SubSectionType")
            MyBase.Columns.Add(Me._columnB_SubSectionType)
            Me._columnB_SectionNo = New Global.System.Data.DataColumn("B.SectionNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_SectionNo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_SectionNo")
            Me._columnB_SectionNo.ExtendedProperties.Add("Generator_UserColumnName", "B.SectionNo")
            MyBase.Columns.Add(Me._columnB_SectionNo)
            Me._columnC_ArrestDay = New Global.System.Data.DataColumn("C.ArrestDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnC_ArrestDay.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnC_ArrestDay")
            Me._columnC_ArrestDay.ExtendedProperties.Add("Generator_UserColumnName", "C.ArrestDay")
            MyBase.Columns.Add(Me._columnC_ArrestDay)
            Me._columnC_ArrestMonth = New Global.System.Data.DataColumn("C.ArrestMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnC_ArrestMonth.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnC_ArrestMonth")
            Me._columnC_ArrestMonth.ExtendedProperties.Add("Generator_UserColumnName", "C.ArrestMonth")
            MyBase.Columns.Add(Me._columnC_ArrestMonth)
            Me._columnC_ArrestYear = New Global.System.Data.DataColumn("C.ArrestYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnC_ArrestYear.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnC_ArrestYear")
            Me._columnC_ArrestYear.ExtendedProperties.Add("Generator_UserColumnName", "C.ArrestYear")
            MyBase.Columns.Add(Me._columnC_ArrestYear)
            Me._columnC_ArrestTime = New Global.System.Data.DataColumn("C.ArrestTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnC_ArrestTime.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnC_ArrestTime")
            Me._columnC_ArrestTime.ExtendedProperties.Add("Generator_UserColumnName", "C.ArrestTime")
            MyBase.Columns.Add(Me._columnC_ArrestTime)
            Me._columnC_SubDistinct = New Global.System.Data.DataColumn("C.SubDistinct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnC_SubDistinct.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnC_SubDistinct")
            Me._columnC_SubDistinct.ExtendedProperties.Add("Generator_UserColumnName", "C.SubDistinct")
            MyBase.Columns.Add(Me._columnC_SubDistinct)
            Me._columnC_Distinct = New Global.System.Data.DataColumn("C.Distinct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnC_Distinct.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnC_Distinct")
            Me._columnC_Distinct.ExtendedProperties.Add("Generator_UserColumnName", "C.Distinct")
            MyBase.Columns.Add(Me._columnC_Distinct)
            Me._columnC_Province = New Global.System.Data.DataColumn("C.Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnC_Province.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnC_Province")
            Me._columnC_Province.ExtendedProperties.Add("Generator_UserColumnName", "C.Province")
            MyBase.Columns.Add(Me._columnC_Province)
            Me._columnA_PaymentDay = New Global.System.Data.DataColumn("A.PaymentDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_PaymentDay.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_PaymentDay")
            Me._columnA_PaymentDay.ExtendedProperties.Add("Generator_UserColumnName", "A.PaymentDay")
            MyBase.Columns.Add(Me._columnA_PaymentDay)
            Me._columnA_PaymentMonth = New Global.System.Data.DataColumn("A.PaymentMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_PaymentMonth.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_PaymentMonth")
            Me._columnA_PaymentMonth.ExtendedProperties.Add("Generator_UserColumnName", "A.PaymentMonth")
            MyBase.Columns.Add(Me._columnA_PaymentMonth)
            Me._columnA_PaymentYear = New Global.System.Data.DataColumn("A.PaymentYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_PaymentYear.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_PaymentYear")
            Me._columnA_PaymentYear.ExtendedProperties.Add("Generator_UserColumnName", "A.PaymentYear")
            MyBase.Columns.Add(Me._columnA_PaymentYear)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewILL_P028Row() As ILL_P028Row
            Return CType(Me.NewRow,ILL_P028Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ILL_P028Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ILL_P028Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ILL_P028RowChangedEvent) Is Nothing) Then
                RaiseEvent ILL_P028RowChanged(Me, New ILL_P028RowChangeEvent(CType(e.Row,ILL_P028Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ILL_P028RowChangingEvent) Is Nothing) Then
                RaiseEvent ILL_P028RowChanging(Me, New ILL_P028RowChangeEvent(CType(e.Row,ILL_P028Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ILL_P028RowDeletedEvent) Is Nothing) Then
                RaiseEvent ILL_P028RowDeleted(Me, New ILL_P028RowChangeEvent(CType(e.Row,ILL_P028Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ILL_P028RowDeletingEvent) Is Nothing) Then
                RaiseEvent ILL_P028RowDeleting(Me, New ILL_P028RowChangeEvent(CType(e.Row,ILL_P028Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveILL_P028Row(ByVal row As ILL_P028Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DATASETREPORT = New DATASETREPORT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ILL_P028DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ILL_P029DataTable
        Inherits Global.System.Data.TypedTableBase(Of ILL_P029Row)
        
        Private _columnA_CompareCode As Global.System.Data.DataColumn
        
        Private _columnA_CompareStation As Global.System.Data.DataColumn
        
        Private _columnA_IndictmentDetailID As Global.System.Data.DataColumn
        
        Private _columnA_PaymentDate As Global.System.Data.DataColumn
        
        Private _columnA_TotalFine As Global.System.Data.DataColumn
        
        Private _columnB_LawbreakerFullName As Global.System.Data.DataColumn
        
        Private _columnB_GuiltbaseName As Global.System.Data.DataColumn
        
        Private _columnB_SubSectionType As Global.System.Data.DataColumn
        
        Private _columnB_SectionNo As Global.System.Data.DataColumn
        
        Private _columnB_BirthDate As Global.System.Data.DataColumn
        
        Private _columnB_RaceName As Global.System.Data.DataColumn
        
        Private _columnB_NationalityNameTH As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private _columnB_Career As Global.System.Data.DataColumn
        
        Private _columnB_Address As Global.System.Data.DataColumn
        
        Private _columnB_Road As Global.System.Data.DataColumn
        
        Private _columnB_SubDistrict As Global.System.Data.DataColumn
        
        Private _columnB_District As Global.System.Data.DataColumn
        
        Private _columnB_Province As Global.System.Data.DataColumn
        
        Private _columnB_FatherName As Global.System.Data.DataColumn
        
        Private _columnB_MatherName As Global.System.Data.DataColumn
        
        Private _columnA_IsRequest As Global.System.Data.DataColumn
        
        Private _columnA_ProductFine As Global.System.Data.DataColumn
        
        Private _columnA_PaymentFineAppointDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ILL_P029"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_CompareCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_CompareCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_CompareStationColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_CompareStation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_IndictmentDetailIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_IndictmentDetailID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_PaymentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_PaymentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_TotalFineColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_TotalFine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_LawbreakerFullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_LawbreakerFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_GuiltbaseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_GuiltbaseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_SubSectionTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_SubSectionType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_SectionNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_SectionNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_BirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_RaceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_RaceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_NationalityNameTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_NationalityNameTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_CareerColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_Career
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_Address
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_RoadColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_Road
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_SubDistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_SubDistrict
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_DistrictColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_District
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_Province
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_FatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_FatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _B_MatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnB_MatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_IsRequestColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_IsRequest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_ProductFineColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_ProductFine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_PaymentFineAppointDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_PaymentFineAppointDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ILL_P029Row
            Get
                Return CType(Me.Rows(index),ILL_P029Row)
            End Get
        End Property
        
        Public Event ILL_P029RowChanging As ILL_P029RowChangeEventHandler
        
        Public Event ILL_P029RowChanged As ILL_P029RowChangeEventHandler
        
        Public Event ILL_P029RowDeleting As ILL_P029RowChangeEventHandler
        
        Public Event ILL_P029RowDeleted As ILL_P029RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddILL_P029Row(ByVal row As ILL_P029Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddILL_P029Row( _
                    ByVal _A_CompareCode As String,  _
                    ByVal _A_CompareStation As String,  _
                    ByVal _A_IndictmentDetailID As String,  _
                    ByVal _A_PaymentDate As String,  _
                    ByVal _A_TotalFine As String,  _
                    ByVal _B_LawbreakerFullName As String,  _
                    ByVal _B_GuiltbaseName As String,  _
                    ByVal _B_SubSectionType As String,  _
                    ByVal _B_SectionNo As String,  _
                    ByVal _B_BirthDate As String,  _
                    ByVal _B_RaceName As String,  _
                    ByVal _B_NationalityNameTH As String,  _
                    ByVal Age As String,  _
                    ByVal _B_Career As String,  _
                    ByVal _B_Address As String,  _
                    ByVal _B_Road As String,  _
                    ByVal _B_SubDistrict As String,  _
                    ByVal _B_District As String,  _
                    ByVal _B_Province As String,  _
                    ByVal _B_FatherName As String,  _
                    ByVal _B_MatherName As String,  _
                    ByVal _A_IsRequest As String,  _
                    ByVal _A_ProductFine As String,  _
                    ByVal _A_PaymentFineAppointDate As String) As ILL_P029Row
            Dim rowILL_P029Row As ILL_P029Row = CType(Me.NewRow,ILL_P029Row)
            Dim columnValuesArray() As Object = New Object() {_A_CompareCode, _A_CompareStation, _A_IndictmentDetailID, _A_PaymentDate, _A_TotalFine, _B_LawbreakerFullName, _B_GuiltbaseName, _B_SubSectionType, _B_SectionNo, _B_BirthDate, _B_RaceName, _B_NationalityNameTH, Age, _B_Career, _B_Address, _B_Road, _B_SubDistrict, _B_District, _B_Province, _B_FatherName, _B_MatherName, _A_IsRequest, _A_ProductFine, _A_PaymentFineAppointDate}
            rowILL_P029Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowILL_P029Row)
            Return rowILL_P029Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ILL_P029DataTable = CType(MyBase.Clone,ILL_P029DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ILL_P029DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columnA_CompareCode = MyBase.Columns("A.CompareCode")
            Me._columnA_CompareStation = MyBase.Columns("A.CompareStation")
            Me._columnA_IndictmentDetailID = MyBase.Columns("A.IndictmentDetailID")
            Me._columnA_PaymentDate = MyBase.Columns("A.PaymentDate")
            Me._columnA_TotalFine = MyBase.Columns("A.TotalFine")
            Me._columnB_LawbreakerFullName = MyBase.Columns("B.LawbreakerFullName")
            Me._columnB_GuiltbaseName = MyBase.Columns("B.GuiltbaseName")
            Me._columnB_SubSectionType = MyBase.Columns("B.SubSectionType")
            Me._columnB_SectionNo = MyBase.Columns("B.SectionNo")
            Me._columnB_BirthDate = MyBase.Columns("B.BirthDate")
            Me._columnB_RaceName = MyBase.Columns("B.RaceName")
            Me._columnB_NationalityNameTH = MyBase.Columns("B.NationalityNameTH")
            Me.columnAge = MyBase.Columns("Age")
            Me._columnB_Career = MyBase.Columns("B.Career")
            Me._columnB_Address = MyBase.Columns("B.Address")
            Me._columnB_Road = MyBase.Columns("B.Road")
            Me._columnB_SubDistrict = MyBase.Columns("B.SubDistrict")
            Me._columnB_District = MyBase.Columns("B.District")
            Me._columnB_Province = MyBase.Columns("B.Province")
            Me._columnB_FatherName = MyBase.Columns("B.FatherName")
            Me._columnB_MatherName = MyBase.Columns("B.MatherName")
            Me._columnA_IsRequest = MyBase.Columns("A.IsRequest")
            Me._columnA_ProductFine = MyBase.Columns("A.ProductFine")
            Me._columnA_PaymentFineAppointDate = MyBase.Columns("A.PaymentFineAppointDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columnA_CompareCode = New Global.System.Data.DataColumn("A.CompareCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_CompareCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_CompareCode")
            Me._columnA_CompareCode.ExtendedProperties.Add("Generator_UserColumnName", "A.CompareCode")
            MyBase.Columns.Add(Me._columnA_CompareCode)
            Me._columnA_CompareStation = New Global.System.Data.DataColumn("A.CompareStation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_CompareStation.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_CompareStation")
            Me._columnA_CompareStation.ExtendedProperties.Add("Generator_UserColumnName", "A.CompareStation")
            MyBase.Columns.Add(Me._columnA_CompareStation)
            Me._columnA_IndictmentDetailID = New Global.System.Data.DataColumn("A.IndictmentDetailID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_IndictmentDetailID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_IndictmentDetailID")
            Me._columnA_IndictmentDetailID.ExtendedProperties.Add("Generator_UserColumnName", "A.IndictmentDetailID")
            MyBase.Columns.Add(Me._columnA_IndictmentDetailID)
            Me._columnA_PaymentDate = New Global.System.Data.DataColumn("A.PaymentDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_PaymentDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_PaymentDate")
            Me._columnA_PaymentDate.ExtendedProperties.Add("Generator_UserColumnName", "A.PaymentDate")
            MyBase.Columns.Add(Me._columnA_PaymentDate)
            Me._columnA_TotalFine = New Global.System.Data.DataColumn("A.TotalFine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_TotalFine.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_TotalFine")
            Me._columnA_TotalFine.ExtendedProperties.Add("Generator_UserColumnName", "A.TotalFine")
            MyBase.Columns.Add(Me._columnA_TotalFine)
            Me._columnB_LawbreakerFullName = New Global.System.Data.DataColumn("B.LawbreakerFullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_LawbreakerFullName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_LawbreakerFullName")
            Me._columnB_LawbreakerFullName.ExtendedProperties.Add("Generator_UserColumnName", "B.LawbreakerFullName")
            MyBase.Columns.Add(Me._columnB_LawbreakerFullName)
            Me._columnB_GuiltbaseName = New Global.System.Data.DataColumn("B.GuiltbaseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_GuiltbaseName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_GuiltbaseName")
            Me._columnB_GuiltbaseName.ExtendedProperties.Add("Generator_UserColumnName", "B.GuiltbaseName")
            MyBase.Columns.Add(Me._columnB_GuiltbaseName)
            Me._columnB_SubSectionType = New Global.System.Data.DataColumn("B.SubSectionType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_SubSectionType.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_SubSectionType")
            Me._columnB_SubSectionType.ExtendedProperties.Add("Generator_UserColumnName", "B.SubSectionType")
            MyBase.Columns.Add(Me._columnB_SubSectionType)
            Me._columnB_SectionNo = New Global.System.Data.DataColumn("B.SectionNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_SectionNo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_SectionNo")
            Me._columnB_SectionNo.ExtendedProperties.Add("Generator_UserColumnName", "B.SectionNo")
            MyBase.Columns.Add(Me._columnB_SectionNo)
            Me._columnB_BirthDate = New Global.System.Data.DataColumn("B.BirthDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_BirthDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_BirthDate")
            Me._columnB_BirthDate.ExtendedProperties.Add("Generator_UserColumnName", "B.BirthDate")
            MyBase.Columns.Add(Me._columnB_BirthDate)
            Me._columnB_RaceName = New Global.System.Data.DataColumn("B.RaceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_RaceName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_RaceName")
            Me._columnB_RaceName.ExtendedProperties.Add("Generator_UserColumnName", "B.RaceName")
            MyBase.Columns.Add(Me._columnB_RaceName)
            Me._columnB_NationalityNameTH = New Global.System.Data.DataColumn("B.NationalityNameTH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_NationalityNameTH.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_NationalityNameTH")
            Me._columnB_NationalityNameTH.ExtendedProperties.Add("Generator_UserColumnName", "B.NationalityNameTH")
            MyBase.Columns.Add(Me._columnB_NationalityNameTH)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me._columnB_Career = New Global.System.Data.DataColumn("B.Career", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_Career.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_Career")
            Me._columnB_Career.ExtendedProperties.Add("Generator_UserColumnName", "B.Career")
            MyBase.Columns.Add(Me._columnB_Career)
            Me._columnB_Address = New Global.System.Data.DataColumn("B.Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_Address.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_Address")
            Me._columnB_Address.ExtendedProperties.Add("Generator_UserColumnName", "B.Address")
            MyBase.Columns.Add(Me._columnB_Address)
            Me._columnB_Road = New Global.System.Data.DataColumn("B.Road", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_Road.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_Road")
            Me._columnB_Road.ExtendedProperties.Add("Generator_UserColumnName", "B.Road")
            MyBase.Columns.Add(Me._columnB_Road)
            Me._columnB_SubDistrict = New Global.System.Data.DataColumn("B.SubDistrict", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_SubDistrict.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_SubDistrict")
            Me._columnB_SubDistrict.ExtendedProperties.Add("Generator_UserColumnName", "B.SubDistrict")
            MyBase.Columns.Add(Me._columnB_SubDistrict)
            Me._columnB_District = New Global.System.Data.DataColumn("B.District", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_District.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_District")
            Me._columnB_District.ExtendedProperties.Add("Generator_UserColumnName", "B.District")
            MyBase.Columns.Add(Me._columnB_District)
            Me._columnB_Province = New Global.System.Data.DataColumn("B.Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_Province.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_Province")
            Me._columnB_Province.ExtendedProperties.Add("Generator_UserColumnName", "B.Province")
            MyBase.Columns.Add(Me._columnB_Province)
            Me._columnB_FatherName = New Global.System.Data.DataColumn("B.FatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_FatherName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_FatherName")
            Me._columnB_FatherName.ExtendedProperties.Add("Generator_UserColumnName", "B.FatherName")
            MyBase.Columns.Add(Me._columnB_FatherName)
            Me._columnB_MatherName = New Global.System.Data.DataColumn("B.MatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnB_MatherName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnB_MatherName")
            Me._columnB_MatherName.ExtendedProperties.Add("Generator_UserColumnName", "B.MatherName")
            MyBase.Columns.Add(Me._columnB_MatherName)
            Me._columnA_IsRequest = New Global.System.Data.DataColumn("A.IsRequest", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_IsRequest.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_IsRequest")
            Me._columnA_IsRequest.ExtendedProperties.Add("Generator_UserColumnName", "A.IsRequest")
            MyBase.Columns.Add(Me._columnA_IsRequest)
            Me._columnA_ProductFine = New Global.System.Data.DataColumn("A.ProductFine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_ProductFine.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_ProductFine")
            Me._columnA_ProductFine.ExtendedProperties.Add("Generator_UserColumnName", "A.ProductFine")
            MyBase.Columns.Add(Me._columnA_ProductFine)
            Me._columnA_PaymentFineAppointDate = New Global.System.Data.DataColumn("A.PaymentFineAppointDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_PaymentFineAppointDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_PaymentFineAppointDate")
            Me._columnA_PaymentFineAppointDate.ExtendedProperties.Add("Generator_UserColumnName", "A.PaymentFineAppointDate")
            MyBase.Columns.Add(Me._columnA_PaymentFineAppointDate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewILL_P029Row() As ILL_P029Row
            Return CType(Me.NewRow,ILL_P029Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ILL_P029Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ILL_P029Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ILL_P029RowChangedEvent) Is Nothing) Then
                RaiseEvent ILL_P029RowChanged(Me, New ILL_P029RowChangeEvent(CType(e.Row,ILL_P029Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ILL_P029RowChangingEvent) Is Nothing) Then
                RaiseEvent ILL_P029RowChanging(Me, New ILL_P029RowChangeEvent(CType(e.Row,ILL_P029Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ILL_P029RowDeletedEvent) Is Nothing) Then
                RaiseEvent ILL_P029RowDeleted(Me, New ILL_P029RowChangeEvent(CType(e.Row,ILL_P029Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ILL_P029RowDeletingEvent) Is Nothing) Then
                RaiseEvent ILL_P029RowDeleting(Me, New ILL_P029RowChangeEvent(CType(e.Row,ILL_P029Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveILL_P029Row(ByVal row As ILL_P029Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DATASETREPORT = New DATASETREPORT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ILL_P029DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ILL_P030Row
        Inherits Global.System.Data.DataRow
        
        Private tableILL_P030 As ILL_P030DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableILL_P030 = CType(Me.Table,ILL_P030DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArrestCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.ArrestCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArrestCode' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.ArrestCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArrestStation() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.ArrestStationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArrestStation' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.ArrestStationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _AS_Name6() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._AS_Name6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AS.Name6' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._AS_Name6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArrestTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.ArrestTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArrestTime' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.ArrestTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _AS_PositionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._AS_PositionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AS.PositionName' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._AS_PositionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _AS_Nameup6() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._AS_Nameup6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AS.Nameup6' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._AS_Nameup6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _AL_count() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._AL_countColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AL.count' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._AL_countColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _AL_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._AL_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AL.Name' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._AL_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _AP_ProductDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._AP_ProductDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AP.ProductDesc' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._AP_ProductDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Behaviour() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.BehaviourColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Behaviour' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.BehaviourColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GuiltBaseName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.GuiltBaseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GuiltBaseName' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.GuiltBaseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ai_Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._ai_LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ai.Location' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._ai_LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OccurrenceTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.OccurrenceTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OccurrenceTime' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.OccurrenceTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArrestDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.ArrestDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArrestDay' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.ArrestDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArrestMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.ArrestMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArrestMonth' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.ArrestMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArrestYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.ArrestYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArrestYear' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.ArrestYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OccurrenceDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.OccurrenceDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OccurrenceDay' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.OccurrenceDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OccurrenceMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.OccurrenceMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OccurrenceMonth' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.OccurrenceMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OccurrenceYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.OccurrenceYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OccurrenceYear' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.OccurrenceYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prompt() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030.PromptColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prompt' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030.PromptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _AS_OfficeName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._AS_OfficeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AS.OfficeName' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._AS_OfficeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ai_Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._ai_AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ai.Address' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._ai_AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ai_Village() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._ai_VillageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ai.Village' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._ai_VillageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ai_SubDistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._ai_SubDistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ai.SubDistrict' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._ai_SubDistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ai_District() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._ai_DistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ai.District' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._ai_DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ai_Province() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._ai_ProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ai.Province' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._ai_ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ai_Road() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P030._ai_RoadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ai.Road' in table 'ILL_P030' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P030._ai_RoadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrestCodeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.ArrestCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrestCodeNull()
            Me(Me.tableILL_P030.ArrestCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrestStationNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.ArrestStationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrestStationNull()
            Me(Me.tableILL_P030.ArrestStationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_AS_Name6Null() As Boolean
            Return Me.IsNull(Me.tableILL_P030._AS_Name6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_AS_Name6Null()
            Me(Me.tableILL_P030._AS_Name6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrestTimeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.ArrestTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrestTimeNull()
            Me(Me.tableILL_P030.ArrestTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_AS_PositionNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._AS_PositionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_AS_PositionNameNull()
            Me(Me.tableILL_P030._AS_PositionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_AS_Nameup6Null() As Boolean
            Return Me.IsNull(Me.tableILL_P030._AS_Nameup6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_AS_Nameup6Null()
            Me(Me.tableILL_P030._AS_Nameup6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_AL_countNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._AL_countColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_AL_countNull()
            Me(Me.tableILL_P030._AL_countColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_AL_NameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._AL_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_AL_NameNull()
            Me(Me.tableILL_P030._AL_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_AP_ProductDescNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._AP_ProductDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_AP_ProductDescNull()
            Me(Me.tableILL_P030._AP_ProductDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBehaviourNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.BehaviourColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBehaviourNull()
            Me(Me.tableILL_P030.BehaviourColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGuiltBaseNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.GuiltBaseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGuiltBaseNameNull()
            Me(Me.tableILL_P030.GuiltBaseNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ai_LocationNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._ai_LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ai_LocationNull()
            Me(Me.tableILL_P030._ai_LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccurrenceTimeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.OccurrenceTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccurrenceTimeNull()
            Me(Me.tableILL_P030.OccurrenceTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrestDayNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.ArrestDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrestDayNull()
            Me(Me.tableILL_P030.ArrestDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrestMonthNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.ArrestMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrestMonthNull()
            Me(Me.tableILL_P030.ArrestMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrestYearNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.ArrestYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrestYearNull()
            Me(Me.tableILL_P030.ArrestYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccurrenceDayNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.OccurrenceDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccurrenceDayNull()
            Me(Me.tableILL_P030.OccurrenceDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccurrenceMonthNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.OccurrenceMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccurrenceMonthNull()
            Me(Me.tableILL_P030.OccurrenceMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOccurrenceYearNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.OccurrenceYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOccurrenceYearNull()
            Me(Me.tableILL_P030.OccurrenceYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPromptNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030.PromptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPromptNull()
            Me(Me.tableILL_P030.PromptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_AS_OfficeNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._AS_OfficeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_AS_OfficeNameNull()
            Me(Me.tableILL_P030._AS_OfficeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ai_AddressNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._ai_AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ai_AddressNull()
            Me(Me.tableILL_P030._ai_AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ai_VillageNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._ai_VillageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ai_VillageNull()
            Me(Me.tableILL_P030._ai_VillageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ai_SubDistrictNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._ai_SubDistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ai_SubDistrictNull()
            Me(Me.tableILL_P030._ai_SubDistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ai_DistrictNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._ai_DistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ai_DistrictNull()
            Me(Me.tableILL_P030._ai_DistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ai_ProvinceNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._ai_ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ai_ProvinceNull()
            Me(Me.tableILL_P030._ai_ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ai_RoadNull() As Boolean
            Return Me.IsNull(Me.tableILL_P030._ai_RoadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ai_RoadNull()
            Me(Me.tableILL_P030._ai_RoadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ILL_P028Row
        Inherits Global.System.Data.DataRow
        
        Private tableILL_P028 As ILL_P028DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableILL_P028 = CType(Me.Table,ILL_P028DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_CompareCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_CompareCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.CompareCode' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_CompareCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_CompareStation() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_CompareStationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.CompareStation' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_CompareStationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_IndictmentDetailID() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_IndictmentDetailIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.IndictmentDetailID' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_IndictmentDetailIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_PaymentDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_PaymentDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.PaymentDate' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_PaymentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_TotalFine() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_TotalFineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.TotalFine' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_TotalFineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_LawbreakerFullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._B_LawbreakerFullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.LawbreakerFullName' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._B_LawbreakerFullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_GuiltbaseName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._B_GuiltbaseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.GuiltbaseName' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._B_GuiltbaseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_SubSectionType() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._B_SubSectionTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.SubSectionType' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._B_SubSectionTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_SectionNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._B_SectionNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.SectionNo' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._B_SectionNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _C_ArrestDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._C_ArrestDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C.ArrestDay' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._C_ArrestDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _C_ArrestMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._C_ArrestMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C.ArrestMonth' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._C_ArrestMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _C_ArrestYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._C_ArrestYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C.ArrestYear' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._C_ArrestYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _C_ArrestTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._C_ArrestTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C.ArrestTime' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._C_ArrestTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _C_SubDistinct() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._C_SubDistinctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C.SubDistinct' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._C_SubDistinctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _C_Distinct() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._C_DistinctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C.Distinct' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._C_DistinctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _C_Province() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._C_ProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'C.Province' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._C_ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_PaymentDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_PaymentDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.PaymentDay' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_PaymentDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_PaymentMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_PaymentMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.PaymentMonth' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_PaymentMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_PaymentYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P028._A_PaymentYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.PaymentYear' in table 'ILL_P028' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P028._A_PaymentYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_CompareCodeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_CompareCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_CompareCodeNull()
            Me(Me.tableILL_P028._A_CompareCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_CompareStationNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_CompareStationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_CompareStationNull()
            Me(Me.tableILL_P028._A_CompareStationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_IndictmentDetailIDNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_IndictmentDetailIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_IndictmentDetailIDNull()
            Me(Me.tableILL_P028._A_IndictmentDetailIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_PaymentDateNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_PaymentDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_PaymentDateNull()
            Me(Me.tableILL_P028._A_PaymentDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_TotalFineNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_TotalFineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_TotalFineNull()
            Me(Me.tableILL_P028._A_TotalFineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_LawbreakerFullNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._B_LawbreakerFullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_LawbreakerFullNameNull()
            Me(Me.tableILL_P028._B_LawbreakerFullNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_GuiltbaseNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._B_GuiltbaseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_GuiltbaseNameNull()
            Me(Me.tableILL_P028._B_GuiltbaseNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_SubSectionTypeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._B_SubSectionTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_SubSectionTypeNull()
            Me(Me.tableILL_P028._B_SubSectionTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_SectionNoNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._B_SectionNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_SectionNoNull()
            Me(Me.tableILL_P028._B_SectionNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_C_ArrestDayNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._C_ArrestDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_C_ArrestDayNull()
            Me(Me.tableILL_P028._C_ArrestDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_C_ArrestMonthNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._C_ArrestMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_C_ArrestMonthNull()
            Me(Me.tableILL_P028._C_ArrestMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_C_ArrestYearNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._C_ArrestYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_C_ArrestYearNull()
            Me(Me.tableILL_P028._C_ArrestYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_C_ArrestTimeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._C_ArrestTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_C_ArrestTimeNull()
            Me(Me.tableILL_P028._C_ArrestTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_C_SubDistinctNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._C_SubDistinctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_C_SubDistinctNull()
            Me(Me.tableILL_P028._C_SubDistinctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_C_DistinctNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._C_DistinctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_C_DistinctNull()
            Me(Me.tableILL_P028._C_DistinctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_C_ProvinceNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._C_ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_C_ProvinceNull()
            Me(Me.tableILL_P028._C_ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_PaymentDayNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_PaymentDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_PaymentDayNull()
            Me(Me.tableILL_P028._A_PaymentDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_PaymentMonthNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_PaymentMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_PaymentMonthNull()
            Me(Me.tableILL_P028._A_PaymentMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_PaymentYearNull() As Boolean
            Return Me.IsNull(Me.tableILL_P028._A_PaymentYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_PaymentYearNull()
            Me(Me.tableILL_P028._A_PaymentYearColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ILL_P029Row
        Inherits Global.System.Data.DataRow
        
        Private tableILL_P029 As ILL_P029DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableILL_P029 = CType(Me.Table,ILL_P029DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_CompareCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_CompareCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.CompareCode' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_CompareCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_CompareStation() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_CompareStationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.CompareStation' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_CompareStationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_IndictmentDetailID() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_IndictmentDetailIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.IndictmentDetailID' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_IndictmentDetailIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_PaymentDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_PaymentDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.PaymentDate' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_PaymentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_TotalFine() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_TotalFineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.TotalFine' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_TotalFineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_LawbreakerFullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_LawbreakerFullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.LawbreakerFullName' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_LawbreakerFullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_GuiltbaseName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_GuiltbaseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.GuiltbaseName' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_GuiltbaseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_SubSectionType() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_SubSectionTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.SubSectionType' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_SubSectionTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_SectionNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_SectionNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.SectionNo' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_SectionNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_BirthDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_BirthDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.BirthDate' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_RaceName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_RaceNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.RaceName' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_RaceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_NationalityNameTH() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_NationalityNameTHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.NationalityNameTH' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_NationalityNameTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029.AgeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_Career() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_CareerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.Career' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_CareerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.Address' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_Road() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_RoadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.Road' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_RoadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_SubDistrict() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_SubDistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.SubDistrict' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_SubDistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_District() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_DistrictColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.District' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_DistrictColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_Province() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_ProvinceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.Province' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_FatherName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_FatherNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.FatherName' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_FatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _B_MatherName() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._B_MatherNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B.MatherName' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._B_MatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_IsRequest() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_IsRequestColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.IsRequest' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_IsRequestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_ProductFine() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_ProductFineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.ProductFine' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_ProductFineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_PaymentFineAppointDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableILL_P029._A_PaymentFineAppointDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A.PaymentFineAppointDate' in table 'ILL_P029' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableILL_P029._A_PaymentFineAppointDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_CompareCodeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_CompareCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_CompareCodeNull()
            Me(Me.tableILL_P029._A_CompareCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_CompareStationNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_CompareStationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_CompareStationNull()
            Me(Me.tableILL_P029._A_CompareStationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_IndictmentDetailIDNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_IndictmentDetailIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_IndictmentDetailIDNull()
            Me(Me.tableILL_P029._A_IndictmentDetailIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_PaymentDateNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_PaymentDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_PaymentDateNull()
            Me(Me.tableILL_P029._A_PaymentDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_TotalFineNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_TotalFineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_TotalFineNull()
            Me(Me.tableILL_P029._A_TotalFineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_LawbreakerFullNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_LawbreakerFullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_LawbreakerFullNameNull()
            Me(Me.tableILL_P029._B_LawbreakerFullNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_GuiltbaseNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_GuiltbaseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_GuiltbaseNameNull()
            Me(Me.tableILL_P029._B_GuiltbaseNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_SubSectionTypeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_SubSectionTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_SubSectionTypeNull()
            Me(Me.tableILL_P029._B_SubSectionTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_SectionNoNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_SectionNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_SectionNoNull()
            Me(Me.tableILL_P029._B_SectionNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_BirthDateNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_BirthDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_BirthDateNull()
            Me(Me.tableILL_P029._B_BirthDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_RaceNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_RaceNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_RaceNameNull()
            Me(Me.tableILL_P029._B_RaceNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_NationalityNameTHNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_NationalityNameTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_NationalityNameTHNull()
            Me(Me.tableILL_P029._B_NationalityNameTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableILL_P029.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_CareerNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_CareerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_CareerNull()
            Me(Me.tableILL_P029._B_CareerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_AddressNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_AddressNull()
            Me(Me.tableILL_P029._B_AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_RoadNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_RoadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_RoadNull()
            Me(Me.tableILL_P029._B_RoadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_SubDistrictNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_SubDistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_SubDistrictNull()
            Me(Me.tableILL_P029._B_SubDistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_DistrictNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_DistrictColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_DistrictNull()
            Me(Me.tableILL_P029._B_DistrictColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_ProvinceNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_ProvinceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_ProvinceNull()
            Me(Me.tableILL_P029._B_ProvinceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_FatherNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_FatherNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_FatherNameNull()
            Me(Me.tableILL_P029._B_FatherNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_B_MatherNameNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._B_MatherNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_B_MatherNameNull()
            Me(Me.tableILL_P029._B_MatherNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_IsRequestNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_IsRequestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_IsRequestNull()
            Me(Me.tableILL_P029._A_IsRequestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_ProductFineNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_ProductFineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_ProductFineNull()
            Me(Me.tableILL_P029._A_ProductFineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_A_PaymentFineAppointDateNull() As Boolean
            Return Me.IsNull(Me.tableILL_P029._A_PaymentFineAppointDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_A_PaymentFineAppointDateNull()
            Me(Me.tableILL_P029._A_PaymentFineAppointDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ILL_P030RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ILL_P030Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ILL_P030Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ILL_P030Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ILL_P028RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ILL_P028Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ILL_P028Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ILL_P028Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ILL_P029RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ILL_P029Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ILL_P029Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ILL_P029Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
